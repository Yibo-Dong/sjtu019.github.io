---
---

@inproceedings{dzxccmlp23,
author = {Yibo Dong and Xiaoyu Zhang and Yicong Xu and Chang Cai and Yu Chen and Weikai Miao and Jianwen Li and Geguang Pu},
title = {LightF3: A Lightweight Fully-Process Formal Framework for Automated Verifying Railway Interlocking Systems},
year = {2023},
isbn = {9798400703270},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3611643.3613874},
doi = {10.1145/3611643.3613874},
selected={true},
abstract = {Interlocking has long played a crucial role in railway systems. Its functional correctness, particularly concerning safety, forms the foundation of the entire signaling system. To date, numerous efforts have been made to formally model and verify interlocking systems. However, two main problems persist in most prior work: (1) The formal description of the interlocking system heavily depends on reusing existing models, which often results in overgeneralization and failing to fully utilize the intrinsic characteristics of interlocking systems.  
(2) The verification techniques of current approaches may quickly become outdated, and there is no adaptable method to integrate state-of-the-art verification algorithms or tools.  

To address the above issues, we present LightF3, a lightweight and fully-process formal framework for modeling and verifying railway interlocking systems. LightF3 provides RIS-FL, a formal language based on FQLTL (a variant of LTL) to model the system and its specifications. LightF3 transforms the RIS-FL model automatically to the aiger model, which is the mainstream input of state-of-the-art model checkers, and then invokes the most advanced checkers to complete the verification task. We evaluated LightF3 by testing five real station instances from our industrial partner, demonstrating its effectiveness as a new framework. Additionally, we analyzed the statistics of the verification results from different model-checking techniques, providing useful conclusions for both the railway interlocking and formal methods communities.},
booktitle = {Proceedings of the 31st ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
pages = {1914–1925},
numpages = {12},
keywords = {Formal Methods, Interlocking Systems, Model Checking},
location = {San Francisco, CA, USA},
series = {ESEC/FSE 2023},
abbr = {ESEC/FSE}
}

@ARTICLE{dong2025revisiting,
  author={Dong, Yibo and Chen, Yu and Li, Jianwen and Pu, Geguang and Strichman, Ofer},
  journal={IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems}, 
  title={Revisiting Assumptions Ordering in CAR-Based Model Checking}, 
  year={2025},
  volume={44},
  number={10},
  selected={true},
  url = {{https://ieeexplore.ieee.org/abstract/document/10934092}},
  abbr = {IEEE-TCAD},
  pages={4032-4037},
  keywords={Automobiles;Model checking;Runtime;Safety;Vectors;Training;Integrated circuits;Hardware;Formal verification;Design automation;Complementary approximate reachability (CAR);hardware verification;model checking},
  doi={10.1109/TCAD.2025.3551658},
  abs={Model checking is an automatic formal verification technique that is widely used in hardware verification. The state-of-the-art complete model-checking techniques, based on IC3/PDR and its general variant CAR, are based on computing symbolically sets of under- and over-approximating state sets (called “frames”) with multiple calls to a SAT solver. The performance of those techniques is sensitive to the order of the assumptions with which the SAT solver is invoked, because it affects the unsatisfiable cores that it emits if the formula is unsatisfiable—which the solver emits when the formula is unsatisfiable—that crucially affect the search process. This observation was previously published (Dureja et al., 2020), where two partial assumption ordering strategies, intersection and rotation were suggested (partial in the sense that they determine the order of only a subset of the literals). In this article we extend and improve these strategies based on an analysis of the reason for their effectiveness. We prove that intersection is effective because of what we call locality of the cores, and our improved strategy is based on this observation. We conclude our paper with an extensive empirical evaluation of the various ordering techniques. One of our strategies, Hybrid-CAR, which switches between strategies at runtime, not only outperforms other, fixed ordering strategies, but also outperforms other state-of-the-art bug-finding algorithms, such as ABC-BMC.}
}


@article{dong2025accelerating,
  title={Accelerating CAR-based Model-Checking with Multiple Unsatisfiable Cores},
  year={2025},
  abbr = {SPIN},
  author={Dong, Yibo and Wu, Xiwei and Li, Jianwen and Pu, Geguang and Strichman, Ofer}
}

@InProceedings{dong2026diagnosing,
  title={Diagnosing Performance Differences in Model Checkers via Runtime-Guided Problem Generation},
  year={2025},
  abbr={ASE},
  author={Dong, Yibo and Xu, Yicong, and Deng, Wenjing and Yu, Chen and Zhang, Xiaoyu and Li, Jianwen and Zhang, Chengyu and Pu, Geguang},
  selected={true},
}

@InProceedings{dong2025unleash,
author="Dong, Yibo
and Chen, Yu
and Li, Jianwen
and Pu, Geguang",
editor="R{\"u}mmer, Philipp
and Wu, Zhilin",
title="Unleash the Hidden Power of CAR-Based Model Checking Through Dynamic Traversal",
booktitle="Theoretical Aspects of Software Engineering",
year="2025",
url={{https://link.springer.com/chapter/10.1007/978-3-031-98208-8_22}},
publisher="Springer Nature Switzerland",
address="Cham",
pages="380--397",
abbr = {TASE},
abstract="Complementary Approximate Reachability (CAR) is a leading SAT-based model checking algorithm that combines under- and over-approximating state sequences to verify safety properties. However, its performance is hindered by redundant computations caused by the fixed-order traversal of the under-approximating sequence. To address such a limit, in this paper, we propose a dynamic traversal strategy to optimize CAR. By identifying common inefficiency patterns, we introduce heuristic methods and a scoring mechanism to prioritize states that are more likely to advance verification. We also prove that the correctness of the CAR algorithm can be preserved while exploring only a subset of the U-sequence, enabling partial traversal strategies that significantly reduce computational overhead. Experimental results demonstrate that our approach could solve 10{\%} more cases than the previous best CAR implementation [17] and outperform state-of-the-art IC3 model checkers, e.g., IC3-REF [4, 11]. Our method bridges the gap between CAR's theoretical potential and practical scalability, offering a more efficient solution for industrial-scale verification.",
isbn="978-3-031-98208-8"
}

